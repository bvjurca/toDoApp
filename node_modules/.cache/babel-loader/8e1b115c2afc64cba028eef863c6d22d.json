{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = [\"id\"];\nvar _hoisted_2 = {\n  \"class\": \"card-body\"\n};\nvar _hoisted_3 = [\"onUpdate:modelValue\", \"onChange\"];\n\nvar _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nvar _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h4\", null, \"Task Status\", -1\n/* HOISTED */\n);\n\nvar _hoisted_6 = [\"onClick\", \"onUpdate:modelValue\", \"id\"];\nvar _hoisted_7 = {\n  key: 0\n};\n\nvar _hoisted_8 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nvar _hoisted_9 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.tasks, function (task) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: task.id,\n      id: task.id\n    }, [_createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n      \"aria-label\": \"title\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.title = $event;\n      },\n      \"class\": \"card-title\",\n      onChange: function onChange($event) {\n        return $options.handleEditTitle(task.title, task.id);\n      }\n    }, null, 40\n    /* PROPS, HYDRATE_EVENTS */\n    , _hoisted_3), [[_vModelText, task.title]]), _hoisted_4, _hoisted_5, _withDirectives(_createElementVNode(\"input\", {\n      \"aria-label\": \"checkbox\",\n      \"class\": \"checkbox\",\n      onClick: function onClick($event) {\n        return $options.handleEditStatus(task.is_complete, task.id);\n      },\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.is_complete = $event;\n      },\n      id: task.is_complete\n    }, null, 8\n    /* PROPS */\n    , _hoisted_6), [[_vModelCheckbox, task.is_complete]]), task.is_complete ? (_openBlock(), _createElementBlock(\"span\", _hoisted_7, \" Done\")) : _createCommentVNode(\"v-if\", true), _hoisted_8, _createElementVNode(\"button\", {\n      onClick: function onClick($event) {\n        return $options.handleDeleteTask(task.id);\n      },\n      \"class\": \"card-link\"\n    }, \"Remove Task\", 8\n    /* PROPS */\n    , _hoisted_9)])], 8\n    /* PROPS */\n    , _hoisted_1);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;;EAGW,SAAM;;;;8BAOTA,oBAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM;AAAA;AAAN;;8BACAA,oBAAoB,IAApB,EAAoB,IAApB,EAAI,aAAJ,EAAe;AAAA;AAAf;;;;;;;8BAQ4CA,oBAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM;AAAA;AAAN;;;;uBAlBlDC,oBAsBM,KAtBN,EAsBM,IAtBN,EAsBM,oBArBJA,oBAoBMC,SApBN,EAoBM,IApBN,EAoBMC,YApBcC,UAoBd,EApBmB,UAAbC,IAAa,EAAT;yBAAhBJ,oBAoBM,KApBN,EAoBM;MApBsBK,GAAG,EAAED,IAAI,CAACE,EAoBhC;MApBqCA,EAAE,EAAEF,IAAI,CAACE;IAoB9C,CApBN,GACEP,oBAkBM,KAlBN,cAkBM,iBAjBJA,oBAKE,OALF,EAKE;MAJA,cAAW,OAIX;;eAHSK,IAAI,CAACG,QAAKC;OAGnB;MAFA,SAAM,YAEN;MADCC,QAAM;QAAA,OAAEC,yBAAgBN,IAAI,CAACG,KAArB,EAA4BH,IAAI,CAACE,EAAjC,CAAF;MAAA;IACP,CALF;;IAAA,8BAEWF,IAAI,CAACG,QAeZ,EAXJI,UAWI,EAVJC,UAUI,kBATJb,oBAOE,OAPF,EAOE;MANA,cAAW,UAMX;MALA,SAAM,UAKN;MAJCc,OAAK;QAAA,OAAEH,0BAAiBN,IAAI,CAACU,WAAtB,EAAmCV,IAAI,CAACE,EAAxC,CAAF;MAAA,CAIN;MAHAS,IAAI,EAAC,UAGL;;eAFSX,IAAI,CAACU,cAAWN;OAEzB;MADOF,EAAE,EAAEF,IAAI,CAACU;IAChB,CAPF;;IAAA,kCAKWV,IAAI,CAACU,cAIZ,EAFUV,IAAI,CAACU,6BAAjBd,oBAA0C,MAA1C,EAA0CgB,UAA1C,EAA8B,OAA9B,sCAEE,EAFwCC,UAExC,EADJlB,oBAAiF,QAAjF,EAAiF;MAAxEc,OAAK;QAAA,OAAEH,0BAAiBN,IAAI,CAACE,EAAtB,CAAF;MAAA,CAAmE;MAAtC,SAAM;IAAgC,CAAjF,EAA6D,aAA7D,EAAwE;IAAA;IAAxE,EAAwEY,UAAxE,CACI,CAlBN,EADF;;IAAA;GAoBM,CApBN;;EAAA,CAqBI,EAtBN","names":["_createElementVNode","_createElementBlock","_Fragment","_renderList","_ctx","task","key","id","title","$event","onChange","$options","_hoisted_4","_hoisted_5","onClick","is_complete","type","_hoisted_7","_hoisted_8","_hoisted_9"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <div>\n    <div v-for=\"task in tasks\" :key=\"task.id\" :id=\"task.id\">\n      <div class=\"card-body\">\n        <input\n          aria-label=\"title\"\n          v-model=\"task.title\"\n          class=\"card-title\"\n          @change=\"handleEditTitle(task.title, task.id)\"\n        />\n        <br />\n        <h4>Task Status</h4>\n        <input\n          aria-label=\"checkbox\"\n          class=\"checkbox\"\n          @click=\"handleEditStatus(task.is_complete, task.id)\"\n          type=\"checkbox\"\n          v-model=\"task.is_complete\"\n          v-bind:id=\"task.is_complete\"\n        /><span v-if=\"task.is_complete\"> Done</span><br />\n        <button @click=\"handleDeleteTask(task.id)\" class=\"card-link\">Remove Task</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapState } from 'pinia';\nimport taskStore from '@/store/task';\n\nexport default {\n  name: 'ShowTasks',\n  computed: {\n    ...mapState(taskStore, ['tasks']),\n  },\n  methods: {\n    ...mapActions(taskStore, ['deleteTask', 'editStatus', 'editTitle']),\n\n    changecolor(status, taskId) {\n      if (!status) {\n        document.getElementById(taskId).style.backgroundColor = 'green';\n      } else {\n        document.getElementById(taskId).style.backgroundColor = 'white';\n      }\n    },\n\n    handleDeleteTask(taskId) {\n      try {\n        this.deleteTask(taskId);\n        alert('La tarea se ha eliminado correctamente');\n      } catch (error) {\n        alert('Error: ', error.message);\n      }\n    },\n\n    handleEditStatus(task, taskID) {\n      console.log(task, taskID);\n      this.editStatus(!task, taskID);\n    },\n\n    handleEditTitle(title, taskID) {\n      console.log(title, taskID);\n      if (title.length !== 0) {\n        this.editTitle(title, taskID);\n      } else {\n        alert('No puedes dejar la tarea vacia');\n      }\n    },\n  },\n  watch: {\n    tasks(state) {\n      console.log(state);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}