{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, vModelText as _vModelText, normalizeStyle as _normalizeStyle } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"task-in-list\"\n};\nvar _hoisted_2 = {\n  key: 0\n};\n\nvar _hoisted_3 = /*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"https://i.imgur.com/qN1iZfK.jpg\",\n  alt: \"task illustration\"\n}, null, -1\n/* HOISTED */\n);\n\nvar _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"So far, nothing here\", -1\n/* HOISTED */\n);\n\nvar _hoisted_5 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Your tasks will appear here once you create them\", -1\n/* HOISTED */\n);\n\nvar _hoisted_6 = [_hoisted_3, _hoisted_4, _hoisted_5];\nvar _hoisted_7 = [\"onClick\", \"onUpdate:modelValue\", \"id\"];\nvar _hoisted_8 = {\n  \"class\": \"content\"\n};\nvar _hoisted_9 = [\"onUpdate:modelValue\", \"onChange\"];\nvar _hoisted_10 = {\n  key: 0,\n  id: \"done\"\n};\nvar _hoisted_11 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"ul\", _hoisted_1, [!_ctx.tasks.length ? (_openBlock(), _createElementBlock(\"section\", _hoisted_2, _hoisted_6)) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.tasks, function (task) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: task.id\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      \"class\": \"checkbox\",\n      onClick: function onClick($event) {\n        $options.handleTaskStatus(task.is_complete, task.id);\n      },\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.is_complete = $event;\n      },\n      id: task.is_complete\n    }, null, 8\n    /* PROPS */\n    , _hoisted_7), [[_vModelCheckbox, task.is_complete]]), _createElementVNode(\"div\", _hoisted_8, [_withDirectives(_createElementVNode(\"input\", {\n      \"class\": \"task-name\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.title = $event;\n      },\n      style: _normalizeStyle(task.is_complete ? 'text-decoration: line-through' : 'text-decoration:none'),\n      onChange: function onChange($event) {\n        return $options.handleTaskName(task.title, task.id);\n      }\n    }, null, 44\n    /* STYLE, PROPS, HYDRATE_EVENTS */\n    , _hoisted_9), [[_vModelText, task.title]]), task.is_complete ? (_openBlock(), _createElementBlock(\"span\", _hoisted_10, \" DONE!\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"button\", {\n      id: \"kill\",\n      onClick: function onClick($event) {\n        return $options.deleteTask(task.id);\n      }\n    }, \"Remove\", 8\n    /* PROPS */\n    , _hoisted_11)]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;EACM,SAAM;;;;;;8BAENA,oBAAmE,KAAnE,EAAmE;EAA9DC,GAAG,EAAC,iCAA0D;EAAxBC,GAAG,EAAC;AAAoB,CAAnE;;AAAA;;8BACAF,oBAA6B,IAA7B,EAA6B,IAA7B,EAAI,sBAAJ,EAAwB;AAAA;AAAxB;;8BACAA,oBAAuD,GAAvD,EAAuD,IAAvD,EAAG,kDAAH,EAAmD;AAAA;AAAnD;;kBAFAG,YACAC,YACAC;;;EAUK,SAAM;;;;;EAOqBC,EAAE,EAAC;;;;uBArBvCC,oBA0BK,IA1BL,cA0BK,EAzBaC,WAAMC,wBAAtBF,oBAIU,SAJV,EAIUG,UAJV,EAIUC,UAJV,sCAyBG,qBApBHJ,oBAmBKK,SAnBL,EAmBK,IAnBL,EAmBKC,YAnBcL,UAmBd,EAnBmB,UAAbM,IAAa,EAAT;yBAAfP,oBAmBK,IAnBL,EAmBK;MAnBsBQ,GAAG,EAAED,IAAI,CAACR;IAmBhC,CAnBL,mBACEN,oBAME,OANF,EAME;MALA,SAAM,UAKN;MAJCgB,OAAK;QAAEC,0BAAiBH,IAAI,CAACI,WAAtB,EAAmCJ,IAAI,CAACR,EAAxC;MAA0C,CAIlD;MAHAa,IAAI,EAAC,UAGL;;eAFSL,IAAI,CAACI,cAAWE;OAEzB;MADOd,EAAE,EAAEQ,IAAI,CAACI;IAChB,CANF;;IAAA,kCAIWJ,IAAI,CAACI,gBAGhBlB,oBAQM,KARN,cAQM,iBAPJA,oBAKE,OALF,EAKE;MAJA,SAAM,WAIN;;eAHSc,IAAI,CAACO,QAAKD;OAGnB;MAFCE,KAAK,kBAAER,IAAI,CAACI,WAAL,GAAgB,+BAAhB,GAAgB,sBAAlB,CAEN;MADCK,QAAM;QAAA,OAAEN,wBAAeH,IAAI,CAACO,KAApB,EAA2BP,IAAI,CAACR,EAAhC,CAAF;MAAA;IACP,CALF;;IAAA,8BAEWQ,IAAI,CAACO,QAKZ,EADQP,IAAI,CAACI,6BAAjBX,oBAAqD,MAArD,eAAwC,QAAxC,sCACI,CARN,GASAP,oBAA8D,QAA9D,EAA8D;MAAtDM,EAAE,EAAC,MAAmD;MAA3CU,OAAK;QAAA,OAAEC,oBAAWH,IAAI,CAACR,EAAhB,CAAF;MAAA;IAAsC,CAA9D,EAA+C,QAA/C,EAAqD;IAAA;IAArD,EAAqDkB,WAArD,EAjBF;GAmBK,CAnBL;;EAAA,CAoBG,EA1BL","names":["_createElementVNode","src","alt","_hoisted_3","_hoisted_4","_hoisted_5","id","_createElementBlock","_ctx","length","_hoisted_2","_hoisted_6","_Fragment","_renderList","task","key","onClick","$options","is_complete","type","$event","title","style","onChange","_hoisted_11"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <ul class=\"task-in-list\">\n    <section v-if=\"!tasks.length\">\n      <img src=\"https://i.imgur.com/qN1iZfK.jpg\" alt=\"task illustration\">\n      <h2>So far, nothing here</h2>\n      <p>Your tasks will appear here once you create them</p>\n    </section>\n    <li v-for=\"task in tasks\" :key=\"task.id\">\n      <input\n        class=\"checkbox\"\n        @click=\"handleTaskStatus(task.is_complete, task.id);\"\n        type=\"checkbox\"\n        v-model=\"task.is_complete\"\n        v-bind:id=\"task.is_complete\"\n      />\n      <div class=\"content\">\n        <input\n          class=\"task-name\"\n          v-model=\"task.title\"\n          :style=\"task.is_complete ? 'text-decoration: line-through': 'text-decoration:none'\"\n          @change=\"handleTaskName(task.title, task.id)\"\n        />\n        <span v-if=\"task.is_complete\" id='done'> DONE!</span>\n      </div>\n      <button id=\"kill\" @click=\"deleteTask(task.id)\">Remove</button>\n\n    </li>\n  </ul>\n  \n</template>\n\n<script>\nimport { mapActions, mapState } from \"pinia\";\nimport taskStore from \"@/store/task\";\n\nexport default {\n  name: \"ShowTasks\",\n  computed: {\n    ...mapState(taskStore, [\"tasks\"]),\n  },\n  methods: {\n    ...mapActions(taskStore, [\"delTask\", \"editStatus\", \"editName\"]),\n\n    deleteTask(taskId) {\n      try {\n        this.delTask(taskId);\n        alert(\"Task deleted. Please refresh page.\");\n      } catch (error) {\n        alert(\"Error: \", error.message);\n      }\n    },\n    handleTaskStatus(task, taskID) {\n      this.editStatus(!task, taskID);\n    },\n\n    handleTaskName(title, taskID) {\n      if (title.length !== 0) {\n        this.editName(title, taskID);\n      } else {\n        alert(\"Empty task? That doesn't make sense\");\n      }\n    },\n  },\n  watch: {\n    tasks(state) {\n      console.log(state);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}