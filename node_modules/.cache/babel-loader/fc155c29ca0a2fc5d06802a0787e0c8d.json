{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = {\n  key: 0\n};\nvar _hoisted_2 = {\n  \"for\": \"taskState\"\n};\nvar _hoisted_3 = [\"onClick\", \"onUpdate:modelValue\"];\nvar _hoisted_4 = {\n  \"class\": \"action--buttons\"\n};\nvar _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _ctx.tasksByDate.length ? (_openBlock(), _createElementBlock(\"table\", _hoisted_1, [_createElementVNode(\"tr\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.tableColumns, function (column) {\n    return _openBlock(), _createElementBlock(\"th\", {\n      key: column.key\n    }, _toDisplayString(column.title), 1\n    /* TEXT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.tasksByDate, function (task) {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: task.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(task.title), 1\n    /* TEXT */\n    ), _createElementVNode(\"td\", null, _toDisplayString(task.inserted_at), 1\n    /* TEXT */\n    ), _createElementVNode(\"td\", null, [_createElementVNode(\"label\", _hoisted_2, [_createTextVNode(_toDisplayString(task.is_complete ? \"üëå\" : \"‚ùå\") + \" \", 1\n    /* TEXT */\n    ), _withDirectives(_createElementVNode(\"input\", {\n      onClick: function onClick($event) {\n        return _ctx.updateTaskCompleteState(task.id, !task.is_complete);\n      },\n      type: \"checkbox\",\n      name: \"taskState\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.is_complete = $event;\n      }\n    }, null, 8\n    /* PROPS */\n    , _hoisted_3), [[_vModelCheckbox, task.is_complete]])])]), _createElementVNode(\"td\", null, [_createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.actions, function (action) {\n      return _openBlock(), _createElementBlock(\"button\", {\n        key: action.id,\n        \"class\": _normalizeClass(action[\"class\"]),\n        onClick: function onClick($event) {\n          return action.placeholderAction(task.id);\n        }\n      }, _toDisplayString(action.icon), 11\n      /* TEXT, CLASS, PROPS */\n      , _hoisted_5);\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))])])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"mappings":";;;;;EASe,OAAI;;;;EAON,SAAM;;;;SAfJA,iBAAYC,wBAAzBC,oBAwBQ,OAxBR,EAwBQC,UAxBR,EAwBQ,CAvBNC,oBAEK,IAFL,EAEK,IAFL,EAEK,oBADHF,oBAA4EG,SAA5E,EAA4E,IAA5E,EAA4EC,YAAvDC,kBAAuD,EAA3C,UAAtBC,MAAsB,EAAhB;yBAAjBN,oBAA4E,IAA5E,EAA4E;MAAxCO,GAAG,EAAED,MAAM,CAACC;IAA4B,CAA5E,mBAAwDD,MAAM,CAACE,MAA/D,EAAoE;IAAA;IAApE;GAA4E,CAA5E;;EAAA,CACG,EAFL,CAuBM,qBApBNR,oBAmBKG,SAnBL,EAmBK,IAnBL,EAmBKC,YAnBcN,gBAmBd,EAnByB,UAAnBW,IAAmB,EAAf;yBAAfT,oBAmBK,IAnBL,EAmBK;MAnB4BO,GAAG,EAAEE,IAAI,CAACC;IAmBtC,CAnBL,GACER,oBAAyB,IAAzB,EAAyB,IAAzB,EAAyBS,iBAAlBF,IAAI,CAACD,KAAa,CAAzB,EAAiB;IAAA;IAAjB,GACAN,oBAA+B,IAA/B,EAA+B,IAA/B,EAA+BS,iBAAxBF,IAAI,CAACG,WAAmB,CAA/B,EAAuB;IAAA;IAAvB,GACAV,oBAMK,IANL,EAMK,IANL,EAMK,CALHA,oBAIQ,OAJR,cAIQ,mCAHHO,IAAI,CAACI,WAAL,GAAgB,IAAhB,GAAgB,OAAiB,KACpC;IAAA;KAEM,kBAFNX,oBACgD,OADhD,EACgD;MADxCY,OAAK;QAAA,OAAEhB,6BAAwBW,IAAI,CAACC,EAA7B,EAA+B,CAAGD,IAAI,CAACI,WAAvC,CAAF;MAAA,CACmC;MADoBE,IAAI,EAAC,UACzB;MAA9CC,IAAI,EAAC,WAAyC;;eAApBP,IAAI,CAACI,cAAWI;;IAAI,CADhD;;IAAA,kCAC4BR,IAAI,CAACI,cAC3B,CAJR,CAKG,CANL,GAOAX,oBAQK,IARL,EAQK,IARL,EAQK,CAPHA,oBAMM,KANN,cAMM,oBALJF,oBAISG,SAJT,EAIS,IAJT,EAISC,YAJgBC,aAIhB,EAJuB,UAAjBa,MAAiB,EAAX;2BAArBlB,oBAIS,QAJT,EAIS;QAJ0BO,GAAG,EAAEW,MAAM,CAACR,EAItC;QAHN,SAAKS,gBAAED,MAAM,SAAR,CAGC;QAFNJ,OAAK;UAAA,OAAEI,MAAM,CAACE,iBAAP,CAAyBX,IAAI,CAACC,EAA9B,CAAF;QAAA;MAEC,CAJT,mBAGKQ,MAAM,CAACG,KAHZ,EAGgB;MAAA;MAHhB,EAGgBC,UAHhB;KAIS,CAJT;;IAAA,CAKI,EANN,CAOG,CARL,EAVF;GAmBK,CAnBL;;EAAA,CAoBM,EAxBR","names":["_ctx","length","_createElementBlock","_hoisted_1","_createElementVNode","_Fragment","_renderList","$data","column","key","title","task","id","_toDisplayString","inserted_at","is_complete","onClick","type","name","$event","action","_normalizeClass","placeholderAction","icon","_hoisted_5"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <table v-if=\"tasksByDate.length\">\n    <tr>\n      <th v-for=\"column in tableColumns\" :key=\"column.key\">{{ column.title }}</th>\n    </tr>\n    <tr v-for=\"task in tasksByDate\" :key=\"task.id\">\n      <td>{{ task.title }}</td>\n      <td>{{ task.inserted_at }}</td>\n      <td>\n        <label for=\"taskState\">\n          {{ task.is_complete ? \"üëå\" : \"‚ùå\"  }}\n          <input @click=\"updateTaskCompleteState(task.id, !task.is_complete)\" type=\"checkbox\"\n            name=\"taskState\" v-model=\"task.is_complete\" />\n        </label>\n      </td>\n      <td>\n        <div class=\"action--buttons\">\n          <button v-for=\"action in actions\" :key=\"action.id\"\n            :class=\"action.class\"\n            @click=\"action.placeholderAction(task.id)\">\n            {{ action.icon }}\n          </button>\n        </div>\n      </td>\n    </tr>\n  </table>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'pinia';\nimport taskStore from '@/store/task';\nimport userStore from '@/store/user';\n\nexport default {\n  name: 'TaskList',\n  data() {\n    return {\n      tableColumns: [\n        {\n          title: 'Title',\n          key: 'title',\n        },\n        {\n          title: 'Date',\n          key: 'date',\n        },\n        {\n          title: 'Status',\n          key: 'status',\n        },\n        {\n          title: 'Action',\n          key: 'action',\n        },\n      ],\n      actions: [\n        {\n          id: 0,\n          title: 'Edit',\n          placeholderAction: this.handleEdit,\n        },\n        {\n          id: 1,\n          title: 'Delete',\n          placeholderAction: this.handleDel,\n        },\n      ],\n    };\n  },\n  computed: {\n    ...mapState(taskStore, ['tasksByDate']),\n    ...mapState(userStore, ['user']),\n  },\n  methods: {\n    ...mapActions(taskStore, ['fetchTasks', 'delTask', 'addTask']),\n\n    async handleDel(taskId) {\n      const result = await this.delTask(taskId);\n      if (result) {\n        console.log('Task removed');\n      } else {\n        console.log('Task not removed');\n      }\n    },\n    handleaddTask() {\n      this.addTask({\n        title: 'New task',\n        user_id: this.user.id,\n      });\n    },\n  },\n  created() {\n    this.fetchTasks();\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}