{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  id: \"addtask\"\n};\nvar _hoisted_2 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n    required: \"\",\n    id: \"task\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.title = $event;\n    }),\n    placeholder: \"Type something...\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.title]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.newTask && $options.newTask.apply($options, arguments);\n    }),\n    disabled: !$data.title.length < 2\n  }, \"Add task\", 8\n  /* PROPS */\n  , _hoisted_2)]);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;;;;uBAARC,oBAUM,KAVN,cAUM,iBATFC,oBAKE,OALF,EAKE;IAJAC,QAAQ,EAAR,EAIA;IAHAH,EAAE,EAAC,MAGH;;aAFSI,cAAKC;MAEd;IADAC,WAAW,EAAC;EACZ,CALF;;EAAA,kBAGWF,cAMT,EAFJF,oBAC+C,QAD/C,EAC+C;IADtCK,OAAK;MAAA,OAAEC,+DAAF;IAAA,EACiC;IAA9CC,QAAQ,GAAGL,YAAMM,MAAT,GAAe;EAAuB,CAD/C,EAC8B,UAD9B,EACsC;EAAA;EADtC,EACsCC,UADtC,CAEI,CAVN","names":["id","_createElementBlock","_createElementVNode","required","$data","$event","placeholder","onClick","$options","disabled","length","_hoisted_2"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/taskToBeAdded.vue"],"sourcesContent":["<template>\n  <div id='addtask'>\n      <input\n        required\n        id=\"task\"\n        v-model=\"title\"\n        placeholder=\"Type something...\"\n      />\n   \n    <button @click=\"newTask\"\n    :disabled=\"!title.length < 2\">Add task</button>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapState } from \"pinia\";\nimport userStore from \"../store/user\";\nimport taskStore from \"../store/task\";\n\nexport default {\n  name: \"taskToBeAdded\",\n  data() {\n    return {\n      title: \"\",\n    };\n  },\n  computed: {\n    ...mapState(userStore, [\"user\"]),\n  },\n  methods: {\n    ...mapActions(taskStore, [\"fetchTasks\", \"addTask\"]),\n    newTask() {\n      const taskContent = { \n        title: this.title,\n        user_id: this.user.id,\n        isComplete: this.isComplete,\n       };\n        this.addTask(taskContent.title, taskContent.user_id, taskContent.isComplete);\n    }\n  },\n  created() {\n    this.fetchTasks();\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}