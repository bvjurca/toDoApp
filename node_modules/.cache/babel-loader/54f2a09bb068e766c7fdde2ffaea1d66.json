{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _ctx.tasksByDate.length ? (_openBlock(), _createElementBlock(\"table\", _hoisted_1, [_createElementVNode(\"tr\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.cols, function (column) {\n    return _openBlock(), _createElementBlock(\"th\", {\n      key: column.key\n    }, _toDisplayString(column.title), 1\n    /* TEXT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"mappings":";;;;;SACeA,iBAAYC,wBAAzBC,oBAIQ,OAJR,EAIQC,UAJR,EAIQ,CAHNC,oBAEK,IAFL,EAEK,IAFL,EAEK,oBADHF,oBAAoEG,SAApE,EAAoE,IAApE,EAAoEC,YAA/CC,UAA+C,EAA3C,UAAdC,MAAc,EAAR;yBAAjBN,oBAAoE,IAApE,EAAoE;MAAxCO,GAAG,EAAED,MAAM,CAACC;IAA4B,CAApE,mBAAgDD,MAAM,CAACE,MAAvD,EAA4D;IAAA;IAA5D;GAAoE,CAApE;;EAAA,CACG,EAFL,CAGM,CAJR","names":["_ctx","length","_createElementBlock","_hoisted_1","_createElementVNode","_Fragment","_renderList","$data","column","key","title"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <table v-if=\"tasksByDate.length\">\n    <tr>\n      <th v-for=\"column in cols\" :key=\"column.key\">{{ column.title }}</th>\n    </tr>\n  </table>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'pinia';\nimport taskStore from '@/store/task';\nimport userStore from '@/store/user';\n\nexport default {\n  name: 'TaskList',\n  data() {\n    return {\n      cols: [\n        {\n          title: 'Title',\n          key: 'title',\n        },\n        {\n          title: 'Date',\n          key: 'date',\n        },\n        {\n          title: 'Status',\n          key: 'status',\n        },\n        {\n          title: 'Action',\n          key: 'action',\n        },\n      ],\n      actions: [\n        {\n          id: 0,\n          title: 'Edit',\n          placeholderAction: this.handleEdit,\n        },\n        {\n          id: 1,\n          title: 'Delete',\n          placeholderAction: this.handleDel,\n        },\n      ],\n    };\n  },\n  computed: {\n    ...mapState(taskStore, ['tasksByDate']),\n    ...mapState(userStore, ['user']),\n  },\n  methods: {\n    ...mapActions(taskStore, ['fetchTasks', 'delTask', 'addTask']),\n\n    async handleDel(taskId) {\n      const result = await this.delTask(taskId);\n      if (result) {\n        console.log('Task removed');\n      } else {\n        console.log('Task not removed');\n      }\n    },\n    handleaddTask() {\n      this.addTask({\n        title: 'New task',\n        user_id: this.user.id,\n      });\n    },\n  },\n  created() {\n    this.fetchTasks();\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}