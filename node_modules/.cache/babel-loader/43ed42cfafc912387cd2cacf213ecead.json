{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, createElementVNode as _createElementVNode, withDirectives as _withDirectives, vModelText as _vModelText, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = [\"id\"];\nvar _hoisted_2 = {\n  \"class\": \"task-in-list\"\n};\nvar _hoisted_3 = [\"onClick\", \"onUpdate:modelValue\", \"id\"];\nvar _hoisted_4 = [\"onUpdate:modelValue\", \"onChange\"];\nvar _hoisted_5 = {\n  key: 0\n};\nvar _hoisted_6 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.tasks, function (task) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: task.id,\n      id: task.id\n    }, [_createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n      \"aria-label\": \"checkbox\",\n      \"class\": \"checkbox\",\n      onClick: function onClick($event) {\n        return $options.handleTaskStatus(task.is_complete, task.id);\n      },\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.is_complete = $event;\n      },\n      id: task.is_complete\n    }, null, 8\n    /* PROPS */\n    , _hoisted_3), [[_vModelCheckbox, task.is_complete]]), _withDirectives(_createElementVNode(\"input\", {\n      \"aria-label\": \"title\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.title = $event;\n      },\n      onChange: function onChange($event) {\n        return $options.handleTaskName(task.title, task.id);\n      }\n    }, null, 40\n    /* PROPS, HYDRATE_EVENTS */\n    , _hoisted_4), [[_vModelText, task.title]]), task.is_complete ? (_openBlock(), _createElementBlock(\"span\", _hoisted_5, \" COMPLETE!\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n      id: \"kill\",\n      onClick: function onClick($event) {\n        return $options.deleteTask(task.id);\n      }\n    }, \"Remove\", 8\n    /* PROPS */\n    , _hoisted_6)])], 8\n    /* PROPS */\n    , _hoisted_1);\n  }), 128\n  /* KEYED_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;EAES,SAAM;;;;;;;;;2BADbA,oBAkBMC,SAlBN,EAkBM,IAlBN,EAkBMC,YAlBcC,UAkBd,EAlBmB,UAAbC,IAAa,EAAT;yBAAhBJ,oBAkBM,KAlBN,EAkBM;MAlBsBK,GAAG,EAAED,IAAI,CAACE,EAkBhC;MAlBqCA,EAAE,EAAEF,IAAI,CAACE;IAkB9C,CAlBN,GACEC,oBAgBM,KAhBN,cAgBM,iBAfJA,oBAOE,OAPF,EAOE;MANA,cAAW,UAMX;MALA,SAAM,UAKN;MAJCC,OAAK;QAAA,OAAEC,0BAAiBL,IAAI,CAACM,WAAtB,EAAmCN,IAAI,CAACE,EAAxC,CAAF;MAAA,CAIN;MAHAK,IAAI,EAAC,UAGL;;eAFSP,IAAI,CAACM,cAAWE;OAEzB;MADON,EAAE,EAAEF,IAAI,CAACM;IAChB,CAPF;;IAAA,kCAKWN,IAAI,CAACM,cAUZ,kBAPJH,oBAIE,OAJF,EAIE;MAHA,cAAW,OAGX;;eAFSH,IAAI,CAACS,QAAKD;OAEnB;MADCE,QAAM;QAAA,OAAEL,wBAAeL,IAAI,CAACS,KAApB,EAA2BT,IAAI,CAACE,EAAhC,CAAF;MAAA;IACP,CAJF;;IAAA,8BAEWF,IAAI,CAACS,QAKZ,EAFQT,IAAI,CAACM,6BAAjBV,oBAA+C,MAA/C,EAA+Ce,UAA/C,EAA8B,YAA9B,sCAEI,EADJR,oBAA8D,QAA9D,EAA8D;MAAtDD,EAAE,EAAC,MAAmD;MAA3CE,OAAK;QAAA,OAAEC,oBAAWL,IAAI,CAACE,EAAhB,CAAF;MAAA;IAAsC,CAA9D,EAA+C,QAA/C,EAAqD;IAAA;IAArD,EAAqDU,UAArD,CACI,CAhBN,EADF;;IAAA;GAkBM,CAlBN;;EAAA","names":["_createElementBlock","_Fragment","_renderList","_ctx","task","key","id","_createElementVNode","onClick","$options","is_complete","type","$event","title","onChange","_hoisted_5","_hoisted_6"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <div v-for=\"task in tasks\" :key=\"task.id\" :id=\"task.id\">\n    <div class=\"task-in-list\">\n      <input\n        aria-label=\"checkbox\"\n        class=\"checkbox\"\n        @click=\"handleTaskStatus(task.is_complete, task.id)\"\n        type=\"checkbox\"\n        v-model=\"task.is_complete\"\n        v-bind:id=\"task.is_complete\"\n      />\n      <input\n        aria-label=\"title\"\n        v-model=\"task.title\"\n        @change=\"handleTaskName(task.title, task.id)\"\n      />\n      <span v-if=\"task.is_complete\"> COMPLETE!</span>\n      <button id=\"kill\" @click=\"deleteTask(task.id)\">Remove</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapState } from \"pinia\";\nimport taskStore from \"@/store/task\";\n\nexport default {\n  name: \"ShowTasks\",\n  computed: {\n    ...mapState(taskStore, [\"tasks\"]),\n  },\n  methods: {\n    ...mapActions(taskStore, [\"delTask\", \"editStatus\", \"editName\"]),\n\n    deleteTask(taskId) {\n      try {\n        this.delTask(taskId);\n        alert(\"Task deleted\");\n      } catch (error) {\n        alert(\"Error: \", error.message);\n      }\n    },\n    handleTaskStatus(task, taskID) {\n      this.editStatus(!task, taskID);\n    },\n\n    handleTaskName(title, taskID) {\n      if (title.length !== 0) {\n        this.editName(title, taskID);\n      } else {\n        alert(\"Empty task? That doesn't make sense\");\n      }\n    },\n  },\n  watch: {\n    tasks(state) {\n      console.log(state);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}