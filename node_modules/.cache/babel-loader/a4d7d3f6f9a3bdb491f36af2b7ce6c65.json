{"ast":null,"code":"import _objectSpread from \"/Users/bogdia/IronHack/toDoApp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport { mapActions, mapState } from \"pinia\";\nimport taskStore from \"@/store/task\";\nexport default {\n  name: \"ShowTasks\",\n  computed: _objectSpread(_objectSpread({}, mapState(taskStore, [\"tasks\"])), {}, {\n    createdAt: function createdAt() {\n      var created = new Date();\n      return a;\n    }\n  }),\n  methods: _objectSpread(_objectSpread({}, mapActions(taskStore, [\"delTask\", \"editStatus\", \"editName\"])), {}, {\n    deleteTask: function deleteTask(taskId) {\n      try {\n        this.delTask(taskId);\n        alert(\"Task deleted. Please refresh page.\");\n      } catch (error) {\n        alert(\"Error: \", error.message);\n      }\n    },\n    handleTaskStatus: function handleTaskStatus(task, taskID) {\n      this.editStatus(!task, taskID);\n    },\n    handleTaskName: function handleTaskName(title, taskID) {\n      if (title.length !== 0) {\n        this.editName(title, taskID);\n      } else {\n        alert(\"Empty task? That doesn't make sense\");\n      }\n    }\n  }),\n  watch: {\n    tasks: function tasks(state) {\n      console.log(state);\n    }\n  }\n};","map":{"version":3,"mappings":";;AAmCA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,eAAe;EACbC,IAAI,EAAE,WADO;EAEbC,QAAQ,kCACHH,QAAQ,CAACC,SAAD,EAAY,CAAC,OAAD,CAAZ,CADL;IAENG,SAFM,uBAEM;MACV,IAAMC,OAAM,GAAI,IAAIC,IAAJ,EAAhB;MACA,OAAOC,CAAP;IACF;EALM,EAFK;EASbC,OAAO,kCACFT,UAAU,CAACE,SAAD,EAAY,CAAC,SAAD,EAAY,YAAZ,EAA0B,UAA1B,CAAZ,CADR;IAGLQ,UAHK,sBAGMC,MAHN,EAGc;MACjB,IAAI;QACF,KAAKC,OAAL,CAAaD,MAAb;QACAE,KAAK,CAAC,oCAAD,CAAL;MACF,CAHA,CAGE,OAAOC,KAAP,EAAc;QACdD,KAAK,CAAC,SAAD,EAAYC,KAAK,CAACC,OAAlB,CAAL;MACF;IACD,CAVI;IAWLC,gBAXK,4BAWYC,IAXZ,EAWkBC,MAXlB,EAW0B;MAC7B,KAAKC,UAAL,CAAgB,CAACF,IAAjB,EAAuBC,MAAvB;IACD,CAbI;IAeLE,cAfK,0BAeUC,KAfV,EAeiBH,MAfjB,EAeyB;MAC5B,IAAIG,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;QACtB,KAAKC,QAAL,CAAcF,KAAd,EAAqBH,MAArB;MACF,CAFA,MAEO;QACLL,KAAK,CAAC,qCAAD,CAAL;MACF;IACD;EArBI,EATM;EAgCbW,KAAK,EAAE;IACLC,KADK,iBACCC,KADD,EACQ;MACXC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EAHI;AAhCM,CAAf","names":["mapActions","mapState","taskStore","name","computed","createdAt","created","Date","a","methods","deleteTask","taskId","delTask","alert","error","message","handleTaskStatus","task","taskID","editStatus","handleTaskName","title","length","editName","watch","tasks","state","console","log"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <section class=\"emptystate\" v-if=\"!tasks.length\">\n    <img src=\"https://i.imgur.com/qN1iZfK.jpg\" alt=\"task illustration\" />\n    <h2>So far, nothing here</h2>\n    <p>Your tasks will appear here once you create them</p>\n  </section>\n  <ul class=\"task-in-list\">\n    <li v-for=\"task in tasks\" :key=\"task.id\">\n      <input\n        class=\"checkbox\"\n        @click=\"handleTaskStatus(task.is_complete, task.id)\"\n        type=\"checkbox\"\n        v-model=\"task.is_complete\"\n        v-bind:id=\"task.is_complete\"\n      />\n      <div class=\"content\">\n        <input\n          class=\"task-name\"\n          v-model=\"task.title\"\n          :style=\"\n            task.is_complete\n              ? 'text-decoration: line-through'\n              : 'text-decoration:none'\n          \"\n          @change=\"handleTaskName(task.title, task.id)\"\n        />\n        <span v-if=\"task.is_complete\" id=\"done\"> DONE!</span>\n        <span id='date'>{{ task.inserted_at }}</span>\n      </div>\n      <button id=\"kill\" @click=\"deleteTask(task.id)\">Remove</button>\n    </li>\n  </ul>\n</template>\n\n<script>\nimport { mapActions, mapState } from \"pinia\";\nimport taskStore from \"@/store/task\";\n\nexport default {\n  name: \"ShowTasks\",\n  computed: {\n    ...mapState(taskStore, [\"tasks\"]),\n    createdAt() {\n      const created = new Date\n      return a\n    }\n  },\n  methods: {\n    ...mapActions(taskStore, [\"delTask\", \"editStatus\", \"editName\"]),\n\n    deleteTask(taskId) {\n      try {\n        this.delTask(taskId);\n        alert(\"Task deleted. Please refresh page.\");\n      } catch (error) {\n        alert(\"Error: \", error.message);\n      }\n    },\n    handleTaskStatus(task, taskID) {\n      this.editStatus(!task, taskID);\n    },\n\n    handleTaskName(title, taskID) {\n      if (title.length !== 0) {\n        this.editName(title, taskID);\n      } else {\n        alert(\"Empty task? That doesn't make sense\");\n      }\n    },\n  },\n  watch: {\n    tasks(state) {\n      console.log(state);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}