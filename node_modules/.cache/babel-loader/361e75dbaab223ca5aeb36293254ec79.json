{"ast":null,"code":"import _objectSpread from \"/Users/bogdia/IronHack/toDoApp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { mapActions, mapState } from \"pinia\";\nimport taskStore from \"@/store/task\";\nexport default {\n  name: \"ShowTasks\",\n  data: function data() {\n    return {\n      doneTasks: []\n    };\n  },\n  computed: _objectSpread({}, mapState(taskStore, [\"tasks\"])),\n  methods: _objectSpread(_objectSpread({}, mapActions(taskStore, [\"delTask\", \"editStatus\", \"editName\"])), {}, {\n    deleteTask: function deleteTask(taskId) {\n      try {\n        this.delTask(taskId);\n        alert(\"Task deleted\");\n      } catch (error) {\n        alert(\"Error: \", error.message);\n      }\n    },\n    handleTaskStatus: function handleTaskStatus(task, taskID) {\n      var doneTasks = [];\n      this.editStatus(!task, taskID);\n      doneTasks.push(this.task);\n      console.log(doneTasks);\n    },\n    handleTaskName: function handleTaskName(title, taskID) {\n      if (title.length !== 0) {\n        this.editName(title, taskID);\n      } else {\n        alert(\"Empty task? That doesn't make sense\");\n      }\n    }\n  }),\n  watch: {\n    tasks: function tasks(state) {\n      console.log(state);\n    }\n  }\n};","map":{"version":3,"mappings":";AA8BA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,eAAe;EACbC,IAAI,EAAE,WADO;EAEbC,IAFa,kBAEN;IACL,OAAO;MACLC,SAAS,EAAC;IADL,CAAP;EAGD,CANY;EAObC,QAAQ,oBACHL,QAAQ,CAACC,SAAD,EAAY,CAAC,OAAD,CAAZ,CADL,CAPK;EAUbK,OAAO,kCACFP,UAAU,CAACE,SAAD,EAAY,CAAC,SAAD,EAAY,YAAZ,EAA0B,UAA1B,CAAZ,CADR;IAGLM,UAHK,sBAGMC,MAHN,EAGc;MACjB,IAAI;QACF,KAAKC,OAAL,CAAaD,MAAb;QACAE,KAAK,CAAC,cAAD,CAAL;MACF,CAHA,CAGE,OAAOC,KAAP,EAAc;QACdD,KAAK,CAAC,SAAD,EAAYC,KAAK,CAACC,OAAlB,CAAL;MACF;IACD,CAVI;IAWLC,gBAXK,4BAWYC,IAXZ,EAWkBC,MAXlB,EAW0B;MAC7B,IAAMX,SAAQ,GAAI,EAAlB;MACA,KAAKY,UAAL,CAAgB,CAACF,IAAjB,EAAuBC,MAAvB;MACAX,SAAS,CAACa,IAAV,CAAe,KAAKH,IAApB;MACAI,OAAO,CAACC,GAAR,CAAYf,SAAZ;IACD,CAhBI;IAkBLgB,cAlBK,0BAkBUC,KAlBV,EAkBiBN,MAlBjB,EAkByB;MAC5B,IAAIM,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;QACtB,KAAKC,QAAL,CAAcF,KAAd,EAAqBN,MAArB;MACF,CAFA,MAEO;QACLL,KAAK,CAAC,qCAAD,CAAL;MACF;IACD;EAxBI,EAVM;EAoCbc,KAAK,EAAE;IACLC,KADK,iBACCC,KADD,EACQ;MACXR,OAAO,CAACC,GAAR,CAAYO,KAAZ;IACD;EAHI;AApCM,CAAf","names":["mapActions","mapState","taskStore","name","data","doneTasks","computed","methods","deleteTask","taskId","delTask","alert","error","message","handleTaskStatus","task","taskID","editStatus","push","console","log","handleTaskName","title","length","editName","watch","tasks","state"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <ul class=\"task-in-list\">\n    <li v-for=\"task in tasks\" :key=\"task.id\">\n      <input\n        class=\"checkbox\"\n        @click=\"handleTaskStatus(task.is_complete, task.id)\"\n        type=\"checkbox\"\n        v-model=\"task.is_complete\"\n        v-bind:id=\"task.is_complete\"\n      />\n      <div class=\"content\">\n      <input\n        class=\"task-title\"\n        v-model=\"task.title\"\n        @change=\"handleTaskName(task.title, task.id)\"\n      />\n        <span v-if=\"task.is_complete\"> DONE!</span>\n        <button id=\"kill\" @click=\"deleteTask(task.id)\">Remove</button>\n      </div>\n    </li>\n  </ul>\n  <ul v-for =\"task in doneTasks\" :key=\"task.id\" class='done'>\n    <h2>Completed</h2>\n    <li v-if=\"task.is_complete\"  >\n      {{ task }}\n    </li>\n  </ul>\n</template>\n\n<script>\nimport { mapActions, mapState } from \"pinia\";\nimport taskStore from \"@/store/task\";\n\nexport default {\n  name: \"ShowTasks\",\n  data() {\n    return {\n      doneTasks:[],\n    };\n  },\n  computed: {\n    ...mapState(taskStore, [\"tasks\"]),\n  },\n  methods: {\n    ...mapActions(taskStore, [\"delTask\", \"editStatus\", \"editName\"]),\n\n    deleteTask(taskId) {\n      try {\n        this.delTask(taskId);\n        alert(\"Task deleted\");\n      } catch (error) {\n        alert(\"Error: \", error.message);\n      }\n    },\n    handleTaskStatus(task, taskID) {\n      const doneTasks = [];\n      this.editStatus(!task, taskID);\n      doneTasks.push(this.task);\n      console.log(doneTasks);\n    },\n\n    handleTaskName(title, taskID) {\n      if (title.length !== 0) {\n        this.editName(title, taskID);\n      } else {\n        alert(\"Empty task? That doesn't make sense\");\n      }\n    },\n  },\n  watch: {\n    tasks(state) {\n      console.log(state);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}