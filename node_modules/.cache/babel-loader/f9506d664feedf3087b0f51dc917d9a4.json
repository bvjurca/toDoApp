{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bogdia/IronHack/toDoApp/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/bogdia/IronHack/toDoApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/bogdia/IronHack/toDoApp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { mapState, mapActions } from 'pinia';\nimport taskStore from '@/store/task';\nimport userStore from '@/store/user';\nexport default {\n  name: 'TaskList',\n  data: function data() {\n    return {\n      cols: [{\n        title: 'Title',\n        key: 'title'\n      }, {\n        title: 'Date',\n        key: 'date'\n      }, {\n        title: 'Status',\n        key: 'status'\n      }, {\n        title: 'Action',\n        key: 'action'\n      }],\n      actions: [{\n        id: 0,\n        title: 'Edit',\n        placeholderAction: this.handleEdit\n      }, {\n        id: 1,\n        title: 'Delete',\n        placeholderAction: this.handleDel\n      }]\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState(taskStore, ['tasksByDate'])), mapState(userStore, ['user'])),\n  methods: _objectSpread(_objectSpread({}, mapActions(taskStore, ['fetchTasks', 'delTask', 'addTask'])), {}, {\n    handleDel: function handleDel(taskId) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.delTask(taskId);\n\n              case 2:\n                result = _context.sent;\n\n                if (result) {\n                  console.log('Task removed');\n                } else {\n                  console.log('Task not removed');\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    handleaddTask: function handleaddTask() {\n      this.addTask({\n        title: 'New task',\n        user_id: this.user.id\n      });\n    }\n  }),\n  created: function created() {\n    this.fetchTasks();\n  }\n};","map":{"version":3,"mappings":";;;AASA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,eAAe;EACbC,IAAI,EAAE,UADO;EAEbC,IAFa,kBAEN;IACL,OAAO;MACLC,IAAI,EAAE,CACJ;QACEC,KAAK,EAAE,OADT;QAEEC,GAAG,EAAE;MAFP,CADI,EAKJ;QACED,KAAK,EAAE,MADT;QAEEC,GAAG,EAAE;MAFP,CALI,EASJ;QACED,KAAK,EAAE,QADT;QAEEC,GAAG,EAAE;MAFP,CATI,EAaJ;QACED,KAAK,EAAE,QADT;QAEEC,GAAG,EAAE;MAFP,CAbI,CADD;MAmBLC,OAAO,EAAE,CACP;QACEC,EAAE,EAAE,CADN;QAEEH,KAAK,EAAE,MAFT;QAGEI,iBAAiB,EAAE,KAAKC;MAH1B,CADO,EAMP;QACEF,EAAE,EAAE,CADN;QAEEH,KAAK,EAAE,QAFT;QAGEI,iBAAiB,EAAE,KAAKE;MAH1B,CANO;IAnBJ,CAAP;EAgCD,CAnCY;EAoCbC,QAAQ,kCACHd,QAAQ,CAACE,SAAD,EAAY,CAAC,aAAD,CAAZ,CADL,GAEHF,QAAQ,CAACG,SAAD,EAAY,CAAC,MAAD,CAAZ,CAFL,CApCK;EAwCbY,OAAO,kCACFd,UAAU,CAACC,SAAD,EAAY,CAAC,YAAD,EAAe,SAAf,EAA0B,SAA1B,CAAZ,CADR;IAGCW,SAHD,qBAGWG,MAHX,EAGmB;MAAA;;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACD,KAAI,CAACC,OAAL,CAAaD,MAAb,CADC;;cAAA;gBAChBE,MADgB;;gBAEtB,IAAIA,MAAJ,EAAY;kBACVC,OAAO,CAACC,GAAR,CAAY,cAAZ;gBACF,CAFA,MAEO;kBACLD,OAAO,CAACC,GAAR,CAAY,kBAAZ;gBACF;;cANsB;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAOvB,CAVI;IAWLC,aAXK,2BAWW;MACd,KAAKC,OAAL,CAAa;QACXf,KAAK,EAAE,UADI;QAEXgB,OAAO,EAAE,KAAKC,IAAL,CAAUd;MAFR,CAAb;IAID;EAhBI,EAxCM;EA0Dbe,OA1Da,qBA0DH;IACR,KAAKC,UAAL;EACD;AA5DY,CAAf","names":["mapState","mapActions","taskStore","userStore","name","data","cols","title","key","actions","id","placeholderAction","handleEdit","handleDel","computed","methods","taskId","delTask","result","console","log","handleaddTask","addTask","user_id","user","created","fetchTasks"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <table v-if=\"tasksByDate.length\">\n    <tr>\n      <th v-for=\"column in cols\" :key=\"column.key\">{{ column.title }}</th>\n    </tr>\n  </table>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'pinia';\nimport taskStore from '@/store/task';\nimport userStore from '@/store/user';\n\nexport default {\n  name: 'TaskList',\n  data() {\n    return {\n      cols: [\n        {\n          title: 'Title',\n          key: 'title',\n        },\n        {\n          title: 'Date',\n          key: 'date',\n        },\n        {\n          title: 'Status',\n          key: 'status',\n        },\n        {\n          title: 'Action',\n          key: 'action',\n        },\n      ],\n      actions: [\n        {\n          id: 0,\n          title: 'Edit',\n          placeholderAction: this.handleEdit,\n        },\n        {\n          id: 1,\n          title: 'Delete',\n          placeholderAction: this.handleDel,\n        },\n      ],\n    };\n  },\n  computed: {\n    ...mapState(taskStore, ['tasksByDate']),\n    ...mapState(userStore, ['user']),\n  },\n  methods: {\n    ...mapActions(taskStore, ['fetchTasks', 'delTask', 'addTask']),\n\n    async handleDel(taskId) {\n      const result = await this.delTask(taskId);\n      if (result) {\n        console.log('Task removed');\n      } else {\n        console.log('Task not removed');\n      }\n    },\n    handleaddTask() {\n      this.addTask({\n        title: 'New task',\n        user_id: this.user.id,\n      });\n    },\n  },\n  created() {\n    this.fetchTasks();\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}