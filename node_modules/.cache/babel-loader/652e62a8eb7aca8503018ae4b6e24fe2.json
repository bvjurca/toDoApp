{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, createElementVNode as _createElementVNode, withDirectives as _withDirectives, vModelText as _vModelText, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"task-in-list\"\n};\nvar _hoisted_2 = [\"onClick\", \"onUpdate:modelValue\", \"id\"];\nvar _hoisted_3 = [\"onUpdate:modelValue\", \"onChange\"];\nvar _hoisted_4 = {\n  key: 0\n};\nvar _hoisted_5 = [\"onClick\"];\nvar _hoisted_6 = {\n  key: 0,\n  \"class\": \"done\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.tasks, function (task) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: task.id\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      \"class\": \"checkbox\",\n      onClick: function onClick($event) {\n        return _ctx.handleTaskStatus(task.is_complete, task.id);\n      },\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.is_complete = $event;\n      },\n      id: task.is_complete\n    }, null, 8\n    /* PROPS */\n    , _hoisted_2), [[_vModelCheckbox, task.is_complete]]), _withDirectives(_createElementVNode(\"input\", {\n      \"class\": \"task-title\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.title = $event;\n      },\n      onChange: function onChange($event) {\n        return _ctx.handleTaskName(task.title, task.id);\n      }\n    }, null, 40\n    /* PROPS, HYDRATE_EVENTS */\n    , _hoisted_3), [[_vModelText, task.title]]), task.is_complete ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, \" DONE!\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n      id: \"kill\",\n      onClick: function onClick($event) {\n        return _ctx.deleteTask(task.id);\n      }\n    }, \"Remove\", 8\n    /* PROPS */\n    , _hoisted_5)]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), _ctx.task.is_complete ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.doneTasks, function (task) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: task.id\n    }, _toDisplayString(task), 1\n    /* TEXT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])) : _createCommentVNode(\"v-if\", true)], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;EACM,SAAM;;;;;;;;;;EAkBN,SAAM;;;6DAlBVA,oBAiBK,IAjBL,cAiBK,oBAhBHC,oBAeKC,SAfL,EAeK,IAfL,EAeKC,YAfcC,UAed,EAfmB,UAAbC,IAAa,EAAT;yBAAfJ,oBAeK,IAfL,EAeK;MAfsBK,GAAG,EAAED,IAAI,CAACE;IAehC,CAfL,mBACEP,oBAME,OANF,EAME;MALA,SAAM,UAKN;MAJCQ,OAAK;QAAA,OAAEJ,sBAAiBC,IAAI,CAACI,WAAtB,EAAmCJ,IAAI,CAACE,EAAxC,CAAF;MAAA,CAIN;MAHAG,IAAI,EAAC,UAGL;;eAFSL,IAAI,CAACI,cAAWE;OAEzB;MADOJ,EAAE,EAAEF,IAAI,CAACI;IAChB,CANF;;IAAA,kCAIWJ,IAAI,CAACI,gCAGhBT,oBAIE,OAJF,EAIE;MAHA,SAAM,YAGN;;eAFSK,IAAI,CAACO,QAAKD;OAEnB;MADCE,QAAM;QAAA,OAAET,oBAAeC,IAAI,CAACO,KAApB,EAA2BP,IAAI,CAACE,EAAhC,CAAF;MAAA;IACP,CAJF;;IAAA,8BAEWF,IAAI,CAACO,UAGJP,IAAI,CAACI,6BAAjBR,oBAA2C,MAA3C,EAA2Ca,UAA3C,EAA8B,QAA9B,wCACAd,oBAA8D,QAA9D,EAA8D;MAAtDO,EAAE,EAAC,MAAmD;MAA3CC,OAAK;QAAA,OAAEJ,gBAAWC,IAAI,CAACE,EAAhB,CAAF;MAAA;IAAsC,CAA9D,EAA+C,QAA/C,EAAqD;IAAA;IAArD,EAAqDQ,UAArD,EAdF;GAeK,CAfL;;EAAA,CAgBG,EAjBL,GAkBuBX,UAAKK,6BAA5BR,oBAIK,IAJL,cAIK,oBAHHA,oBAEKC,SAFL,EAEK,IAFL,EAEKC,YAFeC,cAEf,EAFwB,UAAjBC,IAAiB,EAAb;yBAAhBJ,oBAEK,IAFL,EAEK;MAF2BK,GAAG,EAAED,IAAI,CAACE;IAErC,CAFL,mBACKF,KADL,EACS;IAAA;IADT;GAEK,CAFL;;EAAA,CAGG,EAJL","names":["_createElementVNode","_createElementBlock","_Fragment","_renderList","_ctx","task","key","id","onClick","is_complete","type","$event","title","onChange","_hoisted_4","_hoisted_5"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <ul class=\"task-in-list\">\n    <li v-for=\"task in tasks\" :key=\"task.id\">\n      <input\n        class=\"checkbox\"\n        @click=\"handleTaskStatus(task.is_complete, task.id)\"\n        type=\"checkbox\"\n        v-model=\"task.is_complete\"\n        v-bind:id=\"task.is_complete\"\n      />\n      <input\n        class=\"task-title\"\n        v-model=\"task.title\"\n        @change=\"handleTaskName(task.title, task.id)\"\n      />\n      <span v-if=\"task.is_complete\"> DONE!</span>\n      <button id=\"kill\" @click=\"deleteTask(task.id)\">Remove</button>\n    </li>\n  </ul>\n  <ul class='done' v-if=\"task.is_complete\">\n    <li v-for =\"task in doneTasks\" :key=\"task.id\">\n      {{ task }}\n    </li>\n  </ul>\n</template>\n\n<script>\nimport { mapActions, mapState } from \"pinia\";\nimport taskStore from \"@/store/task\";\n\nexport default {\n  name: \"ShowTasks\",\n  data() {\n    return {\n      doneTasks:[],\n    };\n  },\n  computed: {\n    ...mapState(taskStore, [\"tasks\"]),\n  },\n  methods: {\n    ...mapActions(taskStore, [\"delTask\", \"editStatus\", \"editName\"]),\n\n    deleteTask(taskId) {\n      try {\n        this.delTask(taskId);\n        alert(\"Task deleted\");\n      } catch (error) {\n        alert(\"Error: \", error.message);\n      }\n    },\n    handleTaskStatus(task, taskID) {\n      const doneTask\n      this.editStatus(!task, taskID);\n      doneTasks.push(this.task);\n    },\n\n    handleTaskName(title, taskID) {\n      if (title.length !== 0) {\n        this.editName(title, taskID);\n      } else {\n        alert(\"Empty task? That doesn't make sense\");\n      }\n    },\n  },\n  watch: {\n    tasks(state) {\n      console.log(state);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}