{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, createElementVNode as _createElementVNode, withDirectives as _withDirectives, vModelText as _vModelText, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, vShow as _vShow, createVNode as _createVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"task-in-list\"\n};\nvar _hoisted_2 = [\"onClick\", \"onUpdate:modelValue\", \"id\"];\nvar _hoisted_3 = {\n  \"class\": \"content\"\n};\nvar _hoisted_4 = [\"onUpdate:modelValue\", \"onChange\", \"disabled\"];\nvar _hoisted_5 = {\n  key: 0\n};\n\nvar _hoisted_6 = /*#__PURE__*/_createElementVNode(\"h2\", null, \" Something Something \", -1\n/* HOISTED */\n);\n\nvar _hoisted_7 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_some_component = _resolveComponent(\"some-component\");\n\n  return _openBlock(), _createElementBlock(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.tasks, function (task) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: task.id\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      \"class\": \"checkbox\",\n      onClick: function onClick($event) {\n        $options.handleTaskStatus(task.is_complete, task.id);\n        _ctx.disabled = (_ctx.disabled + 1) % 2;\n      },\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.is_complete = $event;\n      },\n      id: task.is_complete\n    }, null, 8\n    /* PROPS */\n    , _hoisted_2), [[_vModelCheckbox, task.is_complete]]), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n      \"class\": \"task-name\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.title = $event;\n      },\n      onChange: function onChange($event) {\n        return $options.handleTaskName(task.title, task.id);\n      },\n      disabled: _ctx.disabled == 1\n    }, null, 40\n    /* PROPS, HYDRATE_EVENTS */\n    , _hoisted_4), [[_vModelText, task.title]]), task.is_complete ? (_openBlock(), _createElementBlock(\"span\", _hoisted_5, \" DONE!\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", {\n      onMouseover: _cache[0] || (_cache[0] = function ($event) {\n        return _ctx.upHere = true;\n      }),\n      onMouseleave: _cache[1] || (_cache[1] = function ($event) {\n        return _ctx.upHere = false;\n      })\n    }, [_hoisted_6, _withDirectives(_createVNode(_component_some_component, null, null, 512\n    /* NEED_PATCH */\n    ), [[_vShow, _ctx.upHere]])], 32\n    /* HYDRATE_EVENTS */\n    ), _createElementVNode(\"button\", {\n      id: \"kill\",\n      onClick: function onClick($event) {\n        return $options.deleteTask(task.id);\n      }\n    }, \"Remove\", 8\n    /* PROPS */\n    , _hoisted_7)])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;EACM,SAAM;;;;EASD,SAAM;;;;;;;8BASbA,oBAA8B,IAA9B,EAA8B,IAA9B,EAAI,uBAAJ,EAAyB;AAAA;AAAzB;;;;;;uBAlBFC,oBAwBK,IAxBL,cAwBK,oBAvBHA,oBAsBKC,SAtBL,EAsBK,IAtBL,EAsBKC,YAtBcC,UAsBd,EAtBmB,UAAbC,IAAa,EAAT;yBAAfJ,oBAsBK,IAtBL,EAsBK;MAtBsBK,GAAG,EAAED,IAAI,CAACE;IAsBhC,CAtBL,mBACEP,oBAME,OANF,EAME;MALA,SAAM,UAKN;MAJCQ,OAAK;QAAEC,0BAAiBJ,IAAI,CAACK,WAAtB,EAAmCL,IAAI,CAACE,EAAxC;QAA6CH,gBAAQ,CAAIA,gBAAQ,CAAZ,IAAY,CAApB;MAAoB,CAIzE;MAHAO,IAAI,EAAC,UAGL;;eAFSN,IAAI,CAACK,cAAWE;OAEzB;MADOL,EAAE,EAAEF,IAAI,CAACK;IAChB,CANF;;IAAA,kCAIWL,IAAI,CAACK,gBAGhBV,oBAaM,KAbN,cAaM,iBAZJA,oBAKE,OALF,EAKE;MAJA,SAAM,WAIN;;eAHSK,IAAI,CAACQ,QAAKD;OAGnB;MAFCE,QAAM;QAAA,OAAEL,wBAAeJ,IAAI,CAACQ,KAApB,EAA2BR,IAAI,CAACE,EAAhC,CAAF;MAAA,CAEP;MADCQ,QAAQ,EAAEX,iBAAQ;IACnB,CALF;;IAAA,8BAEWC,IAAI,CAACQ,QAUZ,EANQR,IAAI,CAACK,6BAAjBT,oBAA2C,MAA3C,EAA2Ce,UAA3C,EAA8B,QAA9B,sCAMI,EALJhB,oBAGF,KAHE,EAGF;MAHQiB,WAAS;QAAA,OAAEb,cAAM,IAAR;MAAA,EAGjB;MAHmCc,YAAU;QAAA,OAAEd,cAAM,KAAR;MAAA;IAG7C,CAHE,GACJe,4BACAC,aAAiDC,yBAAjD,EAAiD,IAAjD,EAAiD,IAAjD,EAAiD;IAAA;IAAjD,GAAiD,UAAzBjB,YAAyB,GAF7C;;IAAA,CAKI,EADJJ,oBAA8D,QAA9D,EAA8D;MAAtDO,EAAE,EAAC,MAAmD;MAA3CC,OAAK;QAAA,OAAEC,oBAAWJ,IAAI,CAACE,EAAhB,CAAF;MAAA;IAAsC,CAA9D,EAA+C,QAA/C,EAAqD;IAAA;IAArD,EAAqDe,UAArD,CACI,CAbN,EARF;GAsBK,CAtBL;;EAAA,CAuBG,EAxBL","names":["_createElementVNode","_createElementBlock","_Fragment","_renderList","_ctx","task","key","id","onClick","$options","is_complete","type","$event","title","onChange","disabled","_hoisted_5","onMouseover","onMouseleave","_hoisted_6","_createVNode","_component_some_component","_hoisted_7"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <ul class=\"task-in-list\">\n    <li v-for=\"task in tasks\" :key=\"task.id\">\n      <input\n        class=\"checkbox\"\n        @click=\"handleTaskStatus(task.is_complete, task.id); disabled = (disabled+1) %2\"\n        type=\"checkbox\"\n        v-model=\"task.is_complete\"\n        v-bind:id=\"task.is_complete\"\n      />\n      <div class=\"content\">\n        <input\n          class=\"task-name\"\n          v-model=\"task.title\"\n          @change=\"handleTaskName(task.title, task.id)\"\n          :disabled=\"disabled == 1\"\n        />\n        <span v-if=\"task.is_complete\"> DONE!</span>\n        <div @mouseover=\"upHere = true\" @mouseleave=\"upHere = false\" >\n    <h2> Something Something </h2>\n    <some-component v-show=\"upHere\"></some-component>\n</div>\n        <button id=\"kill\" @click=\"deleteTask(task.id)\">Remove</button>\n      </div>\n    </li>\n  </ul>\n  \n</template>\n\n<script>\nimport { mapActions, mapState } from \"pinia\";\nimport taskStore from \"@/store/task\";\n\nexport default {\n  name: \"ShowTasks\",\n  data() {\n    return {\n      sequential: 0,\n    };\n  },\n  computed: {\n    ...mapState(taskStore, [\"tasks\"]),\n  },\n  methods: {\n    ...mapActions(taskStore, [\"delTask\", \"editStatus\", \"editName\"]),\n\n    deleteTask(taskId) {\n      try {\n        this.delTask(taskId);\n        alert(\"Task deleted\");\n      } catch (error) {\n        alert(\"Error: \", error.message);\n      }\n    },\n    handleTaskStatus(task, taskID) {\n      this.editStatus(!task, taskID);\n    },\n\n    handleTaskName(title, taskID) {\n      if (title.length !== 0) {\n        this.editName(title, taskID);\n      } else {\n        alert(\"Empty task? That doesn't make sense\");\n      }\n    },\n  },\n  watch: {\n    tasks(state) {\n      console.log(state);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}