{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, createElementVNode as _createElementVNode, withDirectives as _withDirectives, vModelText as _vModelText, createCommentVNode as _createCommentVNode, vShow as _vShow } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"task-in-list\"\n};\nvar _hoisted_2 = [\"onClick\", \"onUpdate:modelValue\", \"id\"];\nvar _hoisted_3 = {\n  \"class\": \"content\"\n};\nvar _hoisted_4 = [\"onUpdate:modelValue\", \"onChange\", \"disabled\"];\nvar _hoisted_5 = {\n  key: 0\n};\nvar _hoisted_6 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.tasks, function (task) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: task.id\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      \"class\": \"checkbox\",\n      onClick: function onClick($event) {\n        $options.handleTaskStatus(task.is_complete, task.id);\n        _ctx.disabled = (_ctx.disabled + 1) % 2;\n      },\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.is_complete = $event;\n      },\n      id: task.is_complete\n    }, null, 8\n    /* PROPS */\n    , _hoisted_2), [[_vModelCheckbox, task.is_complete]]), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n      \"class\": \"task-name\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return task.title = $event;\n      },\n      onChange: function onChange($event) {\n        return $options.handleTaskName(task.title, task.id);\n      },\n      disabled: _ctx.disabled == 1\n    }, null, 40\n    /* PROPS, HYDRATE_EVENTS */\n    , _hoisted_4), [[_vModelText, task.title]]), task.is_complete ? (_openBlock(), _createElementBlock(\"span\", _hoisted_5, \" DONE!\")) : _createCommentVNode(\"v-if\", true), _withDirectives(_createElementVNode(\"button\", {\n      id: \"kill\",\n      onClick: function onClick($event) {\n        return $options.deleteTask(task.id);\n      }\n    }, \"Remove\", 8\n    /* PROPS */\n    , _hoisted_6), [[_vShow, $data.sequential]])])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;EACM,SAAM;;;;EASD,SAAM;;;;;;;;uBATfA,oBAoBK,IApBL,cAoBK,oBAnBHA,oBAkBKC,SAlBL,EAkBK,IAlBL,EAkBKC,YAlBcC,UAkBd,EAlBmB,UAAbC,IAAa,EAAT;yBAAfJ,oBAkBK,IAlBL,EAkBK;MAlBsBK,GAAG,EAAED,IAAI,CAACE;IAkBhC,CAlBL,mBACEC,oBAME,OANF,EAME;MALA,SAAM,UAKN;MAJCC,OAAK;QAAEC,0BAAiBL,IAAI,CAACM,WAAtB,EAAmCN,IAAI,CAACE,EAAxC;QAA6CH,gBAAQ,CAAIA,gBAAQ,CAAZ,IAAY,CAApB;MAAoB,CAIzE;MAHAQ,IAAI,EAAC,UAGL;;eAFSP,IAAI,CAACM,cAAWE;OAEzB;MADON,EAAE,EAAEF,IAAI,CAACM;IAChB,CANF;;IAAA,kCAIWN,IAAI,CAACM,gBAGhBH,oBASM,KATN,cASM,iBARJA,oBAKE,OALF,EAKE;MAJA,SAAM,WAIN;;eAHSH,IAAI,CAACS,QAAKD;OAGnB;MAFCE,QAAM;QAAA,OAAEL,wBAAeL,IAAI,CAACS,KAApB,EAA2BT,IAAI,CAACE,EAAhC,CAAF;MAAA,CAEP;MADCS,QAAQ,EAAEZ,iBAAQ;IACnB,CALF;;IAAA,8BAEWC,IAAI,CAACS,QAMZ,EAFQT,IAAI,CAACM,6BAAjBV,oBAA2C,MAA3C,EAA2CgB,UAA3C,EAA8B,QAA9B,sCAEI,kBADJT,oBAAkF,QAAlF,EAAkF;MAAtDD,EAAE,EAAC,MAAmD;MAA3CE,OAAK;QAAA,OAAEC,oBAAWL,IAAI,CAACE,EAAhB,CAAF;MAAA;IAAsC,CAAlF,EAAmE,QAAnE,EAAyE;IAAA;IAAzE,EAAyEW,UAAzE,GAAyE,UAAzDC,iBAAyD,EACrE,CATN,EARF;GAkBK,CAlBL;;EAAA,CAmBG,EApBL","names":["_createElementBlock","_Fragment","_renderList","_ctx","task","key","id","_createElementVNode","onClick","$options","is_complete","type","$event","title","onChange","disabled","_hoisted_5","_hoisted_6","$data"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <ul class=\"task-in-list\">\n    <li v-for=\"task in tasks\" :key=\"task.id\">\n      <input\n        class=\"checkbox\"\n        @click=\"handleTaskStatus(task.is_complete, task.id); disabled = (disabled+1) %2\"\n        type=\"checkbox\"\n        v-model=\"task.is_complete\"\n        v-bind:id=\"task.is_complete\"\n      />\n      <div class=\"content\">\n        <input\n          class=\"task-name\"\n          v-model=\"task.title\"\n          @change=\"handleTaskName(task.title, task.id)\"\n          :disabled=\"disabled == 1\"\n        />\n        <span v-if=\"task.is_complete\"> DONE!</span>\n        <button v-show=\"sequential\" id=\"kill\" @click=\"deleteTask(task.id)\">Remove</button>\n      </div>\n    </li>\n  </ul>\n  \n</template>\n\n<script>\nimport { mapActions, mapState } from \"pinia\";\nimport taskStore from \"@/store/task\";\n\nexport default {\n  name: \"ShowTasks\",\n  data() {\n    return {\n      sequential: false,\n    };\n  },\n  computed: {\n    ...mapState(taskStore, [\"tasks\"]),\n  },\n  methods: {\n    ...mapActions(taskStore, [\"delTask\", \"editStatus\", \"editName\"]),\n\n    deleteTask(taskId) {\n      try {\n        this.delTask(taskId);\n        alert(\"Task deleted\");\n      } catch (error) {\n        alert(\"Error: \", error.message);\n      }\n    },\n    handleTaskStatus(task, taskID) {\n      this.editStatus(!task, taskID);\n    },\n\n    handleTaskName(title, taskID) {\n      if (title.length !== 0) {\n        this.editName(title, taskID);\n      } else {\n        alert(\"Empty task? That doesn't make sense\");\n      }\n    },\n  },\n  watch: {\n    tasks(state) {\n      console.log(state);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}