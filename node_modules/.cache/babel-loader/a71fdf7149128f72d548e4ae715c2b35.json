{"ast":null,"code":"import _objectSpread from \"/Users/bogdia/IronHack/toDoApp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport { mapActions, mapState } from \"pinia\";\nimport taskStore from \"@/store/task\";\nexport default {\n  name: \"ShowTasks\",\n  computed: _objectSpread({}, mapState(taskStore, [\"tasks\"])),\n  methods: _objectSpread(_objectSpread({}, mapActions(taskStore, [\"delTask\", \"editStatus\", \"editName\"])), {}, {\n    deleteTask: function deleteTask(taskId) {\n      try {\n        this.delTask(taskId);\n        alert(\"Task deleted. Please refresh page.\");\n      } catch (error) {\n        alert(\"Error: \", error.message);\n      }\n    },\n    handleTaskStatus: function handleTaskStatus(task, taskId) {\n      this.editStatus(!task, taskId);\n    },\n    handleTaskName: function handleTaskName(title, taskId) {\n      if (title.length !== 0) {\n        this.editName(title, taskId);\n      } else {\n        alert(\"Empty task? That doesn't make sense\");\n      }\n    },\n    createdAt: function createdAt(insertedDate) {\n      var msPerMinute = 60 * 1000;\n      var msPerHour = msPerMinute * 60;\n      var msPerDay = msPerHour * 24;\n      var msPerMonth = msPerDay * 30;\n      var msPerYear = msPerDay * 365;\n      var timeAgo = Date.now() - insertedDate;\n\n      if (timeAgo < msPerMinute) {\n        return Math.round(timeAgo / 1000) + \" sec ago\";\n      } else if (timeAgo < msPerHour) {\n        return Math.round(timeAgo / msPerMinute) + \" min ago\";\n      } else if (timeAgo < msPerDay) {\n        return Math.round(timeAgo / msPerHour) + \" h ago\";\n      } else if (timeAgo < msPerMonth) {\n        return \"about \" + Math.round(timeAgo / msPerDay) + \" d ago\";\n      } else if (timeAgo < msPerYear) {\n        return \"about \" + Math.round(timeAgo / msPerMonth) + \" mo ago\";\n      } else {\n        return \"about \" + Math.round(timeAgo / msPerYear) + \" y ago\";\n      }\n    }\n  }),\n  watch: {\n    tasks: function tasks(state) {\n      console.log(state);\n    }\n  }\n};","map":{"version":3,"mappings":";;;AAmCA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,eAAe;EACbC,IAAI,EAAE,WADO;EAEbC,QAAQ,oBACHH,QAAQ,CAACC,SAAD,EAAY,CAAC,OAAD,CAAZ,CADL,CAFK;EAKbG,OAAO,kCACFL,UAAU,CAACE,SAAD,EAAY,CAAC,SAAD,EAAY,YAAZ,EAA0B,UAA1B,CAAZ,CADR;IAGLI,UAHK,sBAGMC,MAHN,EAGc;MACjB,IAAI;QACF,KAAKC,OAAL,CAAaD,MAAb;QACAE,KAAK,CAAC,oCAAD,CAAL;MACF,CAHA,CAGE,OAAOC,KAAP,EAAc;QACdD,KAAK,CAAC,SAAD,EAAYC,KAAK,CAACC,OAAlB,CAAL;MACF;IACD,CAVI;IAWLC,gBAXK,4BAWYC,IAXZ,EAWkBN,MAXlB,EAW0B;MAC7B,KAAKO,UAAL,CAAgB,CAACD,IAAjB,EAAuBN,MAAvB;IACD,CAbI;IAeLQ,cAfK,0BAeUC,KAfV,EAeiBT,MAfjB,EAeyB;MAC5B,IAAIS,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;QACtB,KAAKC,QAAL,CAAcF,KAAd,EAAqBT,MAArB;MACF,CAFA,MAEO;QACLE,KAAK,CAAC,qCAAD,CAAL;MACF;IACD,CArBI;IAsBLU,SAtBK,qBAsBKC,YAtBL,EAsBmB;MACtB,IAAIC,WAAU,GAAI,KAAK,IAAvB;MACA,IAAIC,SAAQ,GAAID,WAAU,GAAI,EAA9B;MACA,IAAIE,QAAO,GAAID,SAAQ,GAAI,EAA3B;MACA,IAAIE,UAAS,GAAID,QAAO,GAAI,EAA5B;MACA,IAAIE,SAAQ,GAAIF,QAAO,GAAI,GAA3B;MAEA,IAAIG,OAAM,GAAIC,IAAI,CAACC,GAAL,KAAaR,YAA3B;;MACA,IAAIM,OAAM,GAAIL,WAAd,EAA2B;QACzB,OAAOQ,IAAI,CAACC,KAAL,CAAWJ,OAAM,GAAI,IAArB,IAA6B,UAApC;MACF,CAFA,MAEO,IAAIA,OAAM,GAAIJ,SAAd,EAAyB;QAC9B,OAAOO,IAAI,CAACC,KAAL,CAAWJ,OAAM,GAAIL,WAArB,IAAoC,UAA3C;MACF,CAFO,MAEA,IAAIK,OAAM,GAAIH,QAAd,EAAwB;QAC7B,OAAOM,IAAI,CAACC,KAAL,CAAWJ,OAAM,GAAIJ,SAArB,IAAkC,QAAzC;MACF,CAFO,MAEA,IAAII,OAAM,GAAIF,UAAd,EAA0B;QAC/B,OAAO,WAAWK,IAAI,CAACC,KAAL,CAAWJ,OAAM,GAAIH,QAArB,CAAX,GAA4C,QAAnD;MACF,CAFO,MAEA,IAAIG,OAAM,GAAID,SAAd,EAAyB;QAC9B,OAAO,WAAWI,IAAI,CAACC,KAAL,CAAWJ,OAAM,GAAIF,UAArB,CAAX,GAA8C,SAArD;MACF,CAFO,MAEA;QACL,OAAO,WAAWK,IAAI,CAACC,KAAL,CAAWJ,OAAM,GAAID,SAArB,CAAX,GAA6C,QAApD;MACF;IACD;EA3CI,EALM;EAkDbM,KAAK,EAAE;IACLC,KADK,iBACCC,KADD,EACQ;MACXC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EAHI;AAlDM,CAAf","names":["mapActions","mapState","taskStore","name","computed","methods","deleteTask","taskId","delTask","alert","error","message","handleTaskStatus","task","editStatus","handleTaskName","title","length","editName","createdAt","insertedDate","msPerMinute","msPerHour","msPerDay","msPerMonth","msPerYear","timeAgo","Date","now","Math","round","watch","tasks","state","console","log"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <section class=\"emptystate\" v-if=\"!tasks.length\">\n    <img src=\"https://i.imgur.com/qN1iZfK.jpg\" alt=\"task illustration\" />\n    <h2>So far, nothing here</h2>\n    <p>Your tasks will appear here once you create them</p>\n  </section>\n  <ul class=\"task-in-list\">\n    <li v-for=\"task in tasks\" :key=\"task.id\">\n      <input\n        class=\"checkbox\"\n        @click=\"handleTaskStatus(task.is_complete, task.id)\"\n        type=\"checkbox\"\n        v-model=\"task.is_complete\"\n        v-bind:id=\"task.is_complete\"\n      />\n      <div class=\"content\">\n        <input\n          class=\"task-name\"\n          v-model=\"task.title\"\n          :style=\"\n            task.is_complete\n              ? 'text-decoration: line-through'\n              : 'text-decoration:none'\n          \"\n          @change=\"handleTaskName(task.title, task.id)\"\n        />\n        <span v-if=\"task.is_complete\" id=\"done\"> DONE!</span>\n        <span id=\"date\">{{ this.createdAt(task.inserted_at) + \" \" + new Date (task.inserted_at }}</span>\n      </div>\n      <button id=\"kill\" @click=\"deleteTask(task.id)\">Remove</button>\n    </li>\n  </ul>\n</template>\n\n<script>\nimport { mapActions, mapState } from \"pinia\";\nimport taskStore from \"@/store/task\";\n\nexport default {\n  name: \"ShowTasks\",\n  computed: {\n    ...mapState(taskStore, [\"tasks\"]),\n  },\n  methods: {\n    ...mapActions(taskStore, [\"delTask\", \"editStatus\", \"editName\"]),\n\n    deleteTask(taskId) {\n      try {\n        this.delTask(taskId);\n        alert(\"Task deleted. Please refresh page.\");\n      } catch (error) {\n        alert(\"Error: \", error.message);\n      }\n    },\n    handleTaskStatus(task, taskId) {\n      this.editStatus(!task, taskId);\n    },\n\n    handleTaskName(title, taskId) {\n      if (title.length !== 0) {\n        this.editName(title, taskId);\n      } else {\n        alert(\"Empty task? That doesn't make sense\");\n      }\n    },\n    createdAt(insertedDate) {\n      var msPerMinute = 60 * 1000;\n      var msPerHour = msPerMinute * 60;\n      var msPerDay = msPerHour * 24;\n      var msPerMonth = msPerDay * 30;\n      var msPerYear = msPerDay * 365;\n\n      var timeAgo = Date.now() - insertedDate;\n      if (timeAgo < msPerMinute) {\n        return Math.round(timeAgo / 1000) + \" sec ago\";\n      } else if (timeAgo < msPerHour) {\n        return Math.round(timeAgo / msPerMinute) + \" min ago\";\n      } else if (timeAgo < msPerDay) {\n        return Math.round(timeAgo / msPerHour) + \" h ago\";\n      } else if (timeAgo < msPerMonth) {\n        return \"about \" + Math.round(timeAgo / msPerDay) + \" d ago\";\n      } else if (timeAgo < msPerYear) {\n        return \"about \" + Math.round(timeAgo / msPerMonth) + \" mo ago\";\n      } else {\n        return \"about \" + Math.round(timeAgo / msPerYear) + \" y ago\";\n      }\n    },\n  },\n  watch: {\n    tasks(state) {\n      console.log(state);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}