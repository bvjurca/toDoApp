{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bogdia/IronHack/toDoApp/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/bogdia/IronHack/toDoApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/bogdia/IronHack/toDoApp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { mapState, mapActions } from 'pinia';\nimport taskStore from '@/store/task';\nimport userStore from '@/store/user';\nexport default {\n  name: 'TaskList',\n  data: function data() {\n    return {\n      tableColumns: [{\n        title: 'Title',\n        key: 'title'\n      }, {\n        title: 'Date',\n        key: 'date'\n      }, {\n        title: 'Status',\n        key: 'status'\n      }, {\n        title: 'Action',\n        key: 'action'\n      }],\n      actions: [{\n        id: 0,\n        title: 'Edit',\n        icon: 'üñåÔ∏è',\n        \"class\": 'primary',\n        handleFunction: this.handleEdit\n      }, {\n        id: 1,\n        title: 'Delete',\n        icon: 'üí£',\n        \"class\": 'danger',\n        handleFunction: this.handleDelete\n      }]\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState(taskStore, ['tasksByDate'])), mapState(userStore, ['user'])),\n  methods: _objectSpread(_objectSpread({}, mapActions(taskStore, ['fetchTasks', 'delTask', 'addTask'])), {}, {\n    handleDelete: function handleDelete(taskId) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.delTask(taskId);\n\n              case 2:\n                result = _context.sent;\n\n                if (result) {\n                  console.log('Task removed');\n                } else {\n                  console.log('Task not removed');\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    handleaddTask: function handleaddTask() {\n      this.addTask({\n        title: 'New task',\n        user_id: this.user.id\n      });\n    }\n  }),\n  created: function created() {\n    this.fetchTasks();\n  }\n};","map":{"version":3,"mappings":";;;AA6BA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,eAAe;EACbC,IAAI,EAAE,UADO;EAEbC,IAFa,kBAEN;IACL,OAAO;MACLC,YAAY,EAAE,CACZ;QACEC,KAAK,EAAE,OADT;QAEEC,GAAG,EAAE;MAFP,CADY,EAKZ;QACED,KAAK,EAAE,MADT;QAEEC,GAAG,EAAE;MAFP,CALY,EASZ;QACED,KAAK,EAAE,QADT;QAEEC,GAAG,EAAE;MAFP,CATY,EAaZ;QACED,KAAK,EAAE,QADT;QAEEC,GAAG,EAAE;MAFP,CAbY,CADT;MAmBLC,OAAO,EAAE,CACP;QACEC,EAAE,EAAE,CADN;QAEEH,KAAK,EAAE,MAFT;QAGEI,IAAI,EAAE,KAHR;QAIE,SAAO,SAJT;QAKEC,cAAc,EAAE,KAAKC;MALvB,CADO,EAQP;QACEH,EAAE,EAAE,CADN;QAEEH,KAAK,EAAE,QAFT;QAGEI,IAAI,EAAE,IAHR;QAIE,SAAO,QAJT;QAKEC,cAAc,EAAE,KAAKE;MALvB,CARO;IAnBJ,CAAP;EAoCD,CAvCY;EAwCbC,QAAQ,kCACHf,QAAQ,CAACE,SAAD,EAAY,CAAC,aAAD,CAAZ,CADL,GAEHF,QAAQ,CAACG,SAAD,EAAY,CAAC,MAAD,CAAZ,CAFL,CAxCK;EA4Cba,OAAO,kCACFf,UAAU,CAACC,SAAD,EAAY,CAAC,YAAD,EAAe,SAAf,EAA0B,SAA1B,CAAZ,CADR;IAGCY,YAHD,wBAGcG,MAHd,EAGsB;MAAA;;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACJ,KAAI,CAACC,OAAL,CAAaD,MAAb,CADI;;cAAA;gBACnBE,MADmB;;gBAEzB,IAAIA,MAAJ,EAAY;kBACVC,OAAO,CAACC,GAAR,CAAY,cAAZ;gBACF,CAFA,MAEO;kBACLD,OAAO,CAACC,GAAR,CAAY,kBAAZ;gBACF;;cANyB;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAO1B,CAVI;IAWLC,aAXK,2BAWW;MACd,KAAKC,OAAL,CAAa;QACXhB,KAAK,EAAE,UADI;QAEXiB,OAAO,EAAE,KAAKC,IAAL,CAAUf;MAFR,CAAb;IAID;EAhBI,EA5CM;EA8DbgB,OA9Da,qBA8DH;IACR,KAAKC,UAAL;EACD;AAhEY,CAAf","names":["mapState","mapActions","taskStore","userStore","name","data","tableColumns","title","key","actions","id","icon","handleFunction","handleEdit","handleDelete","computed","methods","taskId","delTask","result","console","log","handleaddTask","addTask","user_id","user","created","fetchTasks"],"sourceRoot":"","sources":["/Users/bogdia/IronHack/toDoApp/src/components/TaskList.vue"],"sourcesContent":["<template>\n  <table v-if=\"tasksByDate.length\">\n    <tr>\n      <th v-for=\"column in tableColumns\" :key=\"column.key\">{{ column.title }}</th>\n    </tr>\n    <tr v-for=\"task in tasksByDate\" :key=\"task.id\">\n      <td>{{ task.title }}</td>\n      <td>{{ task.inserted_at }}</td>\n      <td>\n        <label for=\"taskState\">\n          {{ task.is_complete ? \"üëå\" : \"‚ùå\"  }}\n          <input @click=\"updateTaskCompleteState(task.id, !task.is_complete)\" type=\"checkbox\"\n            name=\"taskState\" v-model=\"task.is_complete\" />\n        </label>\n      </td>\n      <td>\n        <div class=\"action--buttons\">\n          <button v-for=\"action in actions\" :key=\"action.id\"\n            :class=\"action.class\"\n            @click=\"action.handleFunction(task.id)\">\n            {{ action.icon }}\n          </button>\n        </div>\n      </td>\n    </tr>\n  </table>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'pinia';\nimport taskStore from '@/store/task';\nimport userStore from '@/store/user';\n\nexport default {\n  name: 'TaskList',\n  data() {\n    return {\n      tableColumns: [\n        {\n          title: 'Title',\n          key: 'title',\n        },\n        {\n          title: 'Date',\n          key: 'date',\n        },\n        {\n          title: 'Status',\n          key: 'status',\n        },\n        {\n          title: 'Action',\n          key: 'action',\n        },\n      ],\n      actions: [\n        {\n          id: 0,\n          title: 'Edit',\n          icon: 'üñåÔ∏è',\n          class: 'primary',\n          handleFunction: this.handleEdit,\n        },\n        {\n          id: 1,\n          title: 'Delete',\n          icon: 'üí£',\n          class: 'danger',\n          handleFunction: this.handleDelete,\n        },\n      ],\n    };\n  },\n  computed: {\n    ...mapState(taskStore, ['tasksByDate']),\n    ...mapState(userStore, ['user']),\n  },\n  methods: {\n    ...mapActions(taskStore, ['fetchTasks', 'delTask', 'addTask']),\n\n    async handleDelete(taskId) {\n      const result = await this.delTask(taskId);\n      if (result) {\n        console.log('Task removed');\n      } else {\n        console.log('Task not removed');\n      }\n    },\n    handleaddTask() {\n      this.addTask({\n        title: 'New task',\n        user_id: this.user.id,\n      });\n    },\n  },\n  created() {\n    this.fetchTasks();\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}